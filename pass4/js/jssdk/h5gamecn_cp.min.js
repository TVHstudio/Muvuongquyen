window.h5gamecn = function () {
	var appid = "";
	var rechargeIframe;
	var iframeId;
	var passHost;
	var cdnHost = "http://1251010508.cdn.myqcloud.com/1251010508/passa";
	var UA = navigator.userAgent;
	var isAndroid = (UA.indexOf("Android") > -1);
	var payItems;
	var debug = false;
	var loginUrl;
	var passType;
	var passId;
	var _globlePassId = null;
	var gameId;
	var isIos = (UA.indexOf("iPhone") > -1 || UA.indexOf("iPad") > -1);
	var temp = {};
	var getOrderNo;
	var rechargeCb;
	var shareCallback;
	var verifyCallback;
	var logoutCallback;
	var screenOnCallback;
	var shareStatusCallback;
	var sendToDesktopCb;
	var itemId;
	var getFocusStateCb;
	var initcb;
	var initCBData;
	var getShareCb;
	var getIsShowBindPhoneCb;
	var getCheckBindPhoneCb;
	var getBindPhonePanelCb;
	var getIsCustomerBtnCb;
	var getSystemInfoCb;
	var channelVipPayCb;
	var channelVipInfoCb;
	var getVerifyCb;
	var getVerifyInfoCb;
	var isinited;
	var getTopUrlCb;
	var canvasId;
	var platform;
	var serverUrl;
	var enterGameParams;
	var chatResolver;
	var chatCallback;
	var checkPartyResolver;
	var checkPartyCallback;
	var MESSAGES = {
		SHOWRECHARGE: "msg_3",
		GETORDERNO: "msg_5",
		RETURNORDERNO: "mgs_6",
		RECHARGE_CALLBACK: "msg_7",
		INIT: "msg_8",
		SHOWQRCODE: "msg_10",
		SHARE_CALLBACK: "msg_13",
		REPORTDATA: "msg_14",
		SENDTODESKTOP: "msg_15",
		SENDTODESKTOP_CALLBACK: "msg_16",
		QQBROSER_LOGOUT: "msg_17",
		QQBROSER_TOPIC: "msg_18",
		WEIBO_SHARE: "msg_19",
		FOCUS_GETSTATE: "msg_20",
		FOCUS_RETURNSTATE: "msg_21",
		RECHARGE_PAY: "msg_22",
		CHECKSHARE: "msg_23",
		RETURNSHARE: "msg_24",
		INVOKE_SYSTEM: "msg_invoke_system",
		GET_SYSTEM_INFO: "msg_get_system_info",
		GET_SYSTEM_INFO_RETURN: "msg_get_system_info_return",
		BINDPHONE_SHOW: "msg_bindphone_show",
		BINDPHONE_SHOW_RETURN: "msg_bindphone_show_return",
		BINDPHONE_STATUS: "msg_bindphone_status",
		BINDPHONE_STATUS_RETURN: "msg_bindphone_status_return",
		BINDPHONE_PANEL: "msg_bindphone_panel",
		BINDPHONE_PANEL_RETURN: "msg_bindphone_panel_return",
		IS_CUSTOMER_BTN: "msg_is_customer_btn",
		IS_CUSTOMER_BTN_RETURN: "msg_is_customer_btn_return",
		CHANNEL_VIP_PAY: "msg_channel_vip_pay",
		CHANNEL_VIP_PAY_RETURN: "msg_channel_vip_pay_return",
		CHANNEL_VIP_INFO: "msg_channel_vip_info",
		CHANNEL_VIP_INFO_RETURN: "msg_channel_vip_info_return",
		CHECKVERIFY: "msg_checkverify",
		RETURNVERIFY: "msg_verify",
		SHOW_VERIFY: "msg_showverify",
		VERIFY_CALLBACK: "msg_verifycallback",
		GET_VERIFY_INFO: "msg_getVerifyInfo",
		INIT_CALLBACK: "msg_25",
		ON_LOGINERROR: "msg_26",
		SHARE_SHOW: "msg_27",
		SHARE_STATUS: "msg_28",
		SHARE_STATUS_CB: "msg_29",
		GET_SCREENSHOT: "msg_30",
		RETURN_SCREENSHOT: "msg_31",
		MQQ_SENDMSG: "msg_32",
		GET_TOPURL: "msg_33",
		LOGOUT: "msg_logout",
		CHECK_LOGOUT: "msg_checklogout",
		RETURN_LOGOUT: "RETURN_LOGOUT",
		SCREENON: "msg_screenon",
		CHECK_SCREENON: "msg_checkscreenon",
		RETURN_SCREENON: "RETURN_SCREENON",
		CHECK_CHAT: "msg_34",
		RETURN_CHECK_CHAT: "msg_35",
		CHECK_PARTY: "msg_check_party",
		RETURN_CHECK_PARTY: "meg_return_check_party",
		GET_BALANCE: "msg_getBalance",
		RETURN_BALANCE: "msg_returnBalance",
		GET_PLATFORM: "msg_36",
		RETURN_PLATFORM: "msg_37",
		BackForeGround: "msg_BackForeGround",
	};
	var getParameter = function (key) {
		var href = location.search;
		var p = href.substr(1, href.length - 1).split("&");
		for (var i = 0; i < p.length; i++) {
			if ((p[i].split("="))[0] == key) {
				return p[i].split("=")[1]
			}
		}
	};
	var getParameters = function () {
		var href = location.search;
		var param = {};
		if (!href.length) {
			return param
		}
		var p = href.substr(1, href.length - 1).split("&");
		for (var i = 0; i < p.length; i++) {
			param[(p[i].split("="))[0]] = p[i].split("=")[1]
		}
		return param
	};
	var getPassId = function () {
		return getParameter("passIds")
	};
	var createIframe = function (src, id) {
		var ifm = document.createElement("iframe");
		ifm.src = src;
		ifm.width = "100%";
		ifm.height = "100%";
		ifm.style.margin = "auto";
		ifm.style.position = "absolute";
		ifm.style.top = "0";
		ifm.style.left = "0";
		ifm.style.bottom = "0";
		ifm.style.right = "0";
		ifm.style.backgroundColor = "aliceblue";
		ifm.id = id;
		iframeId = id;
		document.body.appendChild(ifm);
		return ifm
	};
	var postMessage = function (msg, d) {
		var data = {};
		data.identify = "h5gamecn";
		data.msg = msg;
		if (d) {
			data.data = d
		}
		try {
			parent.window.postMessage(data, "*")
		} catch (e) {
			console.log(e)
		}
	};
	var toastMsg = function (msg, delay) {
		var div = document.createElement("div");
		div.id = "toast";
		div.style.width = "160px";
		div.style.height = "130px";
		div.style.margin = "auto";
		div.style.position = "absolute";
		div.style.top = "0";
		div.style.bottom = "0";
		div.style.right = "0";
		div.style.left = "0";
		div.innerText = msg;
		div.classList.add("toast");
		var node = document.getElementById("gbox") || document.body;
		node.appendChild(div);
		setTimeout(function () {
			node.removeChild(div)
		}, delay || 1000)
	};
	var objectToSearch = function (param) {
		if (typeof param != "object") {
			console.error("参数不合法");
			return
		}
		var search = "?";
		var keys = Object.keys(param);
		for (var i = 0; i < keys.length; i++) {
			if (i == 0) {
				search += (keys[i] + "=" + param[keys[i]])
			} else {
				search += "&" + (keys[i] + "=" + param[keys[i]])
			}
		}
		return search
	};
	var getSearch = function () {
		return location.search
	};
	var setStorange = function (key, value) {
		localStorage.setItem(key, value)
	};
	var getStorange = function (key) {
		localStorage.getItem(key)
	};
	var gameJumpTo = function (url) {
		top.window.location.href = url
	};
	var getDataXHR = function (url, cb, param, contenttype) {
		var param = param || {};
		var type = param.type || "get";
		var data = param.data || null;
		try {
			var xhr = new XMLHttpRequest();
			xhr.open(type, url, true);
			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4) {
					if (xhr.responseText == "error") {
						console.error("请求" + url + "返回error");
						return
					}
					var responseData = JSON.parse(xhr.responseText);
					if (responseData.code != 0) {
						console.log("=====发生错误=====:", responseData);
						if (responseData.msg) {
							toastMsg(responseData.msg)
						}
						return
					}
					cb && cb(responseData)
				}
			};
			if (contenttype) {
				xhr.setRequestHeader("Content-Type", contenttype)
			}
			xhr.send(data)
		} catch (e) {
			console.error("xhr出错", e);
			return false
		}
	};
	var getResponseTextXHR = function (url, cb, param) {
		var param = param || {};
		var type = param.type || "get";
		var data = param.data || null;
		try {
			var xhr = new XMLHttpRequest();
			xhr.open(type, url, true);
			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4) {
					if (xhr.responseText == "error") {
						console.error("请求" + url + "返回error");
						return
					}
					cb && cb(xhr.responseText)
				}
			};
			xhr.send(data)
		} catch (e) {
			console.error("xhr出错", e);
			return false
		}
	};
	function loadScript(url, callback, failcallback) {
		var script = document.createElement("script");
		script.type = "text/javascript";
		script.onload = function () {
			callback()
		};
		script.onerror = function () {
			failcallback && failcallback();
			script.parentNode.removeChild(script);
			setTimeout(function () {
				loadScript(url, callback)
			}, 1000)
		};
		script.src = url;
		document.getElementsByTagName("head")[0].appendChild(script)
	}
	var initMessageListener = function () {
		console.info("初始化消息监听");
		window.addEventListener("message", function (e) {
			if (e.data.msg == "switchSoundStat") {
				window.changeGameSoundState(e.data.stat)
			}
			var msg = e.data;
			console.log(msg.msg, msg.data);
			if (msg.identify && msg.identify == "h5gamecn") {
				switch (msg.msg) {
				case MESSAGES.GETORDERNO:
					var orderData = getOrderNo(msg.data);
					postMessage(MESSAGES.RETURNORDERNO, {
						orderData: orderData,
						amount: msg.data.amount
					});
					break;
				case MESSAGES.RECHARGE_CALLBACK:
					rechargeCb(msg.data);
					break;
				case MESSAGES.SHARE_CALLBACK:
					console.log("游戏消息:" + JSON.stringify(msg));
					shareCallback && shareCallback(msg.data);
					break;
				case MESSAGES.VERIFY_CALLBACK:
					verifyCallback && verifyCallback(msg.data);
					break;
				case MESSAGES.SENDTODESKTOP_CALLBACK:
					sendToDesktopCb(msg.data);
					break;
				case MESSAGES.FOCUS_RETURNSTATE:
					var has1 = !!getFocusStateCb;
					getFocusStateCb && getFocusStateCb(msg.data);
					break;
				case MESSAGES.RETURNSHARE:
					getShareCb(msg.data);
					break;
				case MESSAGES.GET_SYSTEM_INFO_RETURN:
					getSystemInfoCb && getSystemInfoCb(msg.data);
					break;
				case MESSAGES.IS_CUSTOMER_BTN_RETURN:
					getIsCustomerBtnCb && getIsCustomerBtnCb(msg.data);
					break;
				case MESSAGES.BINDPHONE_SHOW_RETURN:
					getIsShowBindPhoneCb(msg.data);
					break;
				case MESSAGES.BINDPHONE_STATUS_RETURN:
					getCheckBindPhoneCb(msg.data);
					break;
				case MESSAGES.BINDPHONE_PANEL_RETURN:
					getBindPhonePanelCb(msg.data);
					break;
				case MESSAGES.CHANNEL_VIP_PAY_RETURN:
					channelVipPayCb && channelVipPayCb(msg.data);
					break;
				case MESSAGES.CHANNEL_VIP_INFO_RETURN:
					channelVipInfoCb && channelVipInfoCb(msg.data);
					break;
				case MESSAGES.RETURNVERIFY:
					getVerifyCb(msg.data);
					break;
				case MESSAGES.GET_VERIFY_INFO:
					getVerifyInfoCb && getVerifyInfoCb(msg.data);
					break;
				case MESSAGES.RETURN_LOGOUT:
					if (logoutCallback) {
						logoutCallback(msg.data)
					}
					break;
				case MESSAGES.RETURN_SCREENON:
					if (screenOnCallback) {
						screenOnCallback(msg.data)
					}
					break;
				case MESSAGES.INIT_CALLBACK:
					initCBData = msg.data;
					initcb(msg.data || {});
					break;
				case MESSAGES.SHARE_STATUS_CB:
					shareStatusCallback();
					break;
				case MESSAGES.GET_SCREENSHOT:
					getScreenShot();
					break;
				case MESSAGES.GET_TOPURL:
					getTopUrlCb(msg.data);
					break;
				case "msg_serverUrl":
					serverUrl = msg.data;
					break;
				case MESSAGES.RETURN_CHECK_CHAT:
					chatResolver && chatResolver(msg.data);
					chatCallback && chatCallback(msg.data);
					break;
				case MESSAGES.RETURN_CHECK_PARTY:
					checkPartyResolver && checkPartyResolver(msg.data);
					checkPartyCallback && checkPartyCallback(msg.data);
					break;
				case MESSAGES.RETURN_BALANCE:
					getBalanceCB && getBalanceCB(msg.data);
					break;
				case MESSAGES.RETURN_PLATFORM:
					getPlatformCB && getPlatformCB(msg.data);
					break;
				case MESSAGES.BackForeGround:
					if (msg.data.back) {
						backGroundCB && backGroundCB(msg.data)
					} else {
						if (msg.data.fore) {
							foreGroundCB && foreGroundCB(msg.data)
						}
					}
					break
				}
			}
		})
	};
	var isSpPf = false;
	var isSpIn = false;
	var init = function (passId, cb, shareInfo, test, no) {
		if (!isinited) {
			if (!passId) {
				console.error("passId为空")
			} else {
				_globlePassId = passId;
				canvasId = shareInfo.canvasId;
				if (test) {
					passHost = "http://192.168.0.239:8080/pass4/"
				} else {
					if (location.href.indexOf("https") == 0 || passId == "4100003") {
						passHost = "http://pass.h5eco.com/pass_a"
					} else {
						passHost = "http://passa.gz.1251010508.clb.myqcloud.com/pass_a"
					}
				}
				var data = {
					test: test,
					passId: passId,
					shareInfo: shareInfo,
					server_id: getParameter("serverId"),
					data: {},
					pass_params: getParameters(),
				};
				initcb = cb;
				postMessage(MESSAGES.INIT, data)
			}
			isinited = true;
			initMessageListener()
		} else {
			console.log("多次调用init 不再绑定事件,直接回调" + JSON.stringify(initCBData));
			cb && cb(initCBData)
		}
		getTopUrl(function (url) {
			try {
				if (url.indexOf("__eruda") != -1) {
					console.log("===测试===");
					var el = document.createElement("div");
					document.body.appendChild(el);
					loadScript("//cdn.bootcss.com/eruda/1.2.1/eruda.min.js", function () {
						eruda.init({
							container: el
						})
					})
				}
			} catch (e) {
				console.log(e)
			}
		})
	};
	var onloginerror = function () {
		postMessage(MESSAGES.ON_LOGINERROR, loginUrl)
	};
	var getPassType = function () {
		return passType
	};
	var showRecharge = function (items, getordercb, rechargecb) {
		postMessage(MESSAGES.SHOWRECHARGE, items);
		getOrderNo = getordercb;
		rechargeCb = rechargecb
	};
	var pay = function (amount, orderData, cb) {
		postMessage(MESSAGES.RECHARGE_PAY, {
			orderData: orderData,
			amount: amount
		});
		if (window.parent == window || isSpPf) {
			try {
				platform.pay(amount, orderData, cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		}
		rechargeCb = cb
	};
	var weiboShare = function (data, cb) {
		postMessage(MESSAGES.SHARE_STATUS, data);
		shareStatusCallback = cb;
		if (window.parent == window || isSpPf) {
			try {
				platform.shareStatus(data, cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		}
		if (passType != "XLSER") {
			return
		}
		var status = encodeURIComponent(data.status + loginUrl);
		var url = passHost + "/jdk/psa/" + passId + "/update";
		var openId = data.openId;
		var openKey = data.openKey;
		var body = "status=" + status + "&appId=2000007&openId=" + openId + "&openKey=" + openKey;
		getDataXHR(url, function () {
			cb && cb()
		}, {
			type: "post",
			data: body
		}, "application/x-www-form-urlencoded")
	};
	var openTopicCircle = function () {
		postMessage(MESSAGES.QQBROSER_TOPIC)
	};
	var qqborwserLogout = function (openId) {
		postMessage(MESSAGES.QQBROSER_LOGOUT, openId)
	};
	var sendToDesktop = function (cb) {
		postMessage(MESSAGES.SENDTODESKTOP);
		sendToDesktopCb = cb;
		if (window.parent == window || isSpPf) {
			try {
				platform.sendToDesktop(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		}
	};
	var reportData = function (data) {
		if (enterGameParams) {
			if (!data.server) {
				data.server = enterGameParams.serverId
			}
		}
		postMessage(MESSAGES.REPORTDATA, data);
		if (window.parent == window || isSpPf) {
			try {
				platform.reportData(data)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		}
	};
	var invokeSystem = function (data) {
		if (window.parent == window || isSpPf) {
			try {
				platform.invokeSystem(data)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			postMessage(MESSAGES.INVOKE_SYSTEM, data)
		}
	};
	var getSystemInfo = function (callback) {
		getSystemInfoCb = callback;
		if (window.parent == window || isSpPf) {
			try {
				platform.getSystemInfo(callback)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			postMessage(MESSAGES.GET_SYSTEM_INFO)
		}
	};
	var bindPhone = function () {};
	var showQrCode = function () {
		if (window.parent == window || isSpPf) {
			try {
				platform.showQrCode()
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			postMessage(MESSAGES.SHOWQRCODE)
		}
	};
	var getFocusState = function (checkdata, cb) {
		var openId = checkdata.openId;
		var openKey = checkdata.openKey;
		var appId = checkdata.appId;
		getFocusStateCb = cb;
		if (window.parent == window || isSpPf) {
			try {
				platform.checkFocus({
					openId: openId,
					openKey: openKey,
					appId: appId
				}, cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			postMessage(MESSAGES.FOCUS_GETSTATE, {
				openId: openId,
				openKey: openKey,
				appId: appId
			})
		}
	};
	var setShareCallback = function (callback) {
		if (window.parent == window || isSpPf) {
			try {
				platform.setShareCallback(callback)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		}
		shareCallback = callback
	};
	var setVerifyCallback = function (callback) {
		if (window.parent == window || isSpPf) {
			try {
				platform.setVerifyCallback(callback)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		}
		verifyCallback = callback;
		console.log("setVerifyCallbacksetVerifyCallback", verifyCallback)
	};
	var showShare = function (data) {
		postMessage(MESSAGES.SHARE_SHOW, data)
	};
	var showVerify = function (_callback) {
		postMessage(MESSAGES.SHOW_VERIFY, {});
		setVerifyCallback(_callback)
	};
	var logout = function (data) {
		postMessage(MESSAGES.LOGOUT, data || {})
	};
	var checkLogout = function (_cb) {
		if (_cb) {
			logoutCallback = _cb
		}
		postMessage(MESSAGES.CHECK_LOGOUT, {})
	};
	var checkScreenOn = function (_cb) {
		if (_cb) {
			screenOnCallback = _cb
		}
		postMessage(MESSAGES.CHECK_SCREENON, {})
	};
	var screenOn = function (_ifOn) {
		postMessage(MESSAGES.SCREENON, _ifOn)
	};
	var isOpenShare = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.isOpenShare(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			getShareCb = cb;
			postMessage(MESSAGES.CHECKSHARE)
		}
	};
	var isCustomerBtn = function (cb) {
		if (window.parent == window || isSpPf || isSpIn) {
			cb && cb({
				show: 1,
				_default: 1,
			});
			return
		}
		postMessage(MESSAGES.IS_CUSTOMER_BTN);
		getIsCustomerBtnCb = cb
	};
	var isShowBindPhone = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.isShowBindPhone(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			getIsShowBindPhoneCb = cb;
			postMessage(MESSAGES.BINDPHONE_SHOW)
		}
	};
	var checkBindPhone = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.checkBindPhone(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			getCheckBindPhoneCb = cb;
			postMessage(MESSAGES.BINDPHONE_STATUS)
		}
	};
	var bindPhonePanel = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.bindPhonePanel(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			getBindPhonePanelCb = cb;
			postMessage(MESSAGES.BINDPHONE_PANEL)
		}
	};
	var channelVipPay = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.channelVipPay(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			channelVipPayCb = cb;
			postMessage(MESSAGES.CHANNEL_VIP_PAY)
		}
	};
	var channelVipInfo = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.channelVipInfo(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			channelVipInfoCb = cb;
			postMessage(MESSAGES.CHANNEL_VIP_INFO)
		}
	};
	var isOpenVerify = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.isOpenVerify(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			getVerifyCb = cb;
			postMessage(MESSAGES.CHECKVERIFY)
		}
	};
	var getVerifyInfo = function (cb) {
		if (window.parent == window || isSpPf) {
			try {
				platform.getVerifyInfo(cb)
			} catch (e) {
				console.log("非正常进入游戏情况")
			}
		} else {
			getVerifyInfoCb = cb;
			postMessage(MESSAGES.GET_VERIFY_INFO)
		}
	};
	var toHZPay = function (paytime) {
		if (paytime == "year") {
			top.location.href = "http://pay.qq.com/qzone/index.shtml?aid=game" + gameId + ".yop&paytime=year"
		} else {
			top.location.href = "http://pay.qq.com/qzone/index.shtml?aid=game" + gameId + ".op"
		}
	};
	var getScreenShot = function () {
		var canvas = document.getElementById(canvasId) || (document.getElementById("egretDiv") && document.getElementById("egretDiv").children[0]);
		if (canvas) {
			var base64 = canvas.toDataURL();
			postMessage(MESSAGES.RETURN_SCREENSHOT, base64)
		}
	};
	var sendMqqMsg = function (msg) {
		postMessage(MESSAGES.MQQ_SENDMSG, msg)
	};
	var getTopUrl = function (cb) {
		getTopUrlCb = cb;
		postMessage(MESSAGES.GET_TOPURL)
	};
	var getBalanceCB;
	var getBalance = function (_cb) {
		postMessage(MESSAGES.GET_BALANCE, {});
		getBalanceCB = _cb
	};
	var getPlatformCB;
	var getPlatform = function (_cb) {
		postMessage(MESSAGES.GET_PLATFORM, {});
		getPlatformCB = _cb
	};
	var foreGroundCB,
	backGroundCB;
	var setGroundCB = function (_obj) {
		if (_obj.fore) {
			foreGroundCB = _obj.fore
		}
		if (_obj.back) {
			backGroundCB = _obj.back
		}
	};
	var getAnnounce = function (cb, _url) {
		var appid = getParameter("appId");
		if (!appid) {
			return
		}
		var url = _url || "//login.gz.1252384881.clb.myqcloud.com/notice";
		if (document.location.protocol == "http:") {
			url = url.replace("http://login.jzsc.7yao.top/", "http://login.gz.1252384881.clb.myqcloud.com/")
		}
		getResponseTextXHR(url + "?channel=" + appid, function (data) {
			if (data) {
				cb && cb(data)
			} else {
				cb && cb(false)
			}
		})
	};
	var checkDay = function (param) {
		var day = 0;
		var nowD1 = new Date();
		if (param.open_time) {
			day = param.open_time
		} else {
			if (serverParts && enterGameParams) {
				var time1;
				for (var i = 0; i < serverParts.length; i++) {
					var game1 = serverParts[i];
					if (game1.name == enterGameParams.serverId) {
						time1 = game1.openTime
					}
				}
				day = (nowD1 - time1) / 1000 / 60 / 60 / 24
			}
		}
		return day
	};
	function checkChat(param, callback) {
		if (window.parent == window || isSpPf || isSpIn) {
			callback && callback({
				result: "success",
				code: 0,
				content: param.chat_content,
			});
			return
		}
		param.day = checkDay(param);
		postMessage(MESSAGES.CHECK_CHAT, param);
		chatCallback = callback
	}
	function checkParty(param, callback) {
		postMessage(MESSAGES.CHECK_PARTY, param);
		checkPartyCallback = callback
	}
	var enterCallBack;
	var getServerCallBack;
	var getLoginParamsCallBack;
	var _shareInfo;
	var isTest = false;
	var is_init = false;
	var _init = function (params, test) {
		var loginData = getParameters();
		isTest = test;
		_shareInfo = params.shareInfo;
		initGetServer(params);
		if (loginData.passId) {
			init(loginData.passId, function () {}, _shareInfo, isTest)
		} else {
			is_init = true
		}
		if (loginData.serverId) {
			getServerCallBack(1);
			enterCallBack && enterCallBack(1, loginData)
		} else {
			getServer()
		}
	};
	var initGetServer = function (params) {
		if (params.enterCallBack) {
			enterCallBack = params.enterCallBack
		}
		if (params.getServerCallBack) {
			getServerCallBack = params.getServerCallBack
		}
		if (params.getLoginParamsCallBack) {
			getLoginParamsCallBack = params.getLoginParamsCallBack
		}
		if (getParameter("serverUrl") && getParameter("serverUrl") != "undefined") {
			serverUrl = decodeURIComponent(getParameter("serverUrl")) + "?";
			if (document.location.protocol == "http:") {
				serverUrl = serverUrl.replace("http://passa.gz.1251010508.clb.myqcloud.com/", "http://pass.h5eco.com/")
			}
			var param1 = getParameters();
			var i_p = 0;
			for (var p1 in param1) {
				if (p1 != "serverUrl") {
					serverUrl += (i_p == 0 ? "" : "&") + p1 + "=" + param1[p1];
					i_p++
				}
			}
		}
	};
	var enterGame = function (_gameName, cb) {
		if (!serverUrl) {
			console.warn("enterGame fail, no serverUrl");
			return
		}
		console.log("serverUrl:", serverUrl);
		var splitArray = serverUrl.split("?");
		var frameParams = getParameters();
		frameParams.serverId = _gameName;
		delete frameParams.serverUrl;
		var postUrl = splitArray[0].replace("index", "enter") + objectToSearch(frameParams);
		getDataXHR(postUrl, function (t) {
			console.log("enter data:", t);
			var data = t.data;
			if (!data.regist) {
				enterCallBack && enterCallBack(2)
			} else {
				if (data.enterGame) {
					var params = data.params;
					if (data.url) {
						params.url = encodeURIComponent(data.url)
					}
					enterGameParams = params;
					if (is_init) {
						init(enterGameParams.passId, function () {
							enterCallBack && enterCallBack(1, params)
						}, _shareInfo, isTest)
					} else {
						enterCallBack && enterCallBack(1, params)
					}
				}
			}
		})
	};
	var sortByKey = function (data, key, desc) {
		var arr = data;
		key = key || "index";
		arr.sort(function (a, b) {
			if (desc) {
				return b[key] - a[key]
			} else {
				return a[key] - b[key]
			}
		});
		return arr
	};
	var serverParts;
	var getServer = function (_test) {
		if (!serverUrl) {
			console.warn("getServer fail, no serverUrl");
			if (getServerCallBack) {
				getServerCallBack(2)
			}
			var loginPaDa = getParameters();
			console.log("loginPaDa:", getParameters());
			if (getLoginParamsCallBack) {
				console.log("star loginCallback");
				getLoginParamsCallBack(loginPaDa)
			}
			return
		}
		getDataXHR(serverUrl, function (data2) {
			console.log("getServer data:", data2);
			var data2 = data2.data;
			if (!data2.regist) {
				console.log("维护", 2);
				getServerCallBack && getServerCallBack(2)
			} else {
				if (data2.enterGame) {
					getServerCallBack && getServerCallBack(1);
					var params = data2.params;
					if (data2.url) {
						params.url = encodeURIComponent(data2.url)
					}
					enterGameParams = params;
					if (is_init) {
						init(enterGameParams.passId, function () {
							enterCallBack && enterCallBack(1, params)
						}, _shareInfo, isTest)
					} else {
						enterCallBack && enterCallBack(1, params)
					}
				} else {
					var parts = [];
					var oldparts = data2.oldServers;
					var Sparts = [];
					for (var i = 0; i < data2.servers.length; i++) {
						var game1 = data2.servers[i];
						if (game1.index % 10 != 0 || game1.index <= 0) {
							Sparts.push(game1)
						} else {
							parts.push(game1)
						}
					}
					serverParts = parts;
					getServerCallBack && getServerCallBack(0, sortByKey(parts), oldparts, sortByKey(Sparts))
				}
			}
		})
	};
	return {
		init: init,
		getParameters: getParameters,
		getParameter: getParameter,
		object2Search: objectToSearch,
		getDataXHR: getDataXHR,
		postMsg: postMessage,
		showRecharge: showRecharge,
		initMessageListener: initMessageListener,
		loadScript: loadScript,
		isIos: isIos,
		passType: getPassType,
		onloginerror: onloginerror,
		showQrCode: showQrCode,
		getFocusState: getFocusState,
		reportData: reportData,
		sendToDesktop: sendToDesktop,
		qqborwserLogout: qqborwserLogout,
		openTopicCircle: openTopicCircle,
		weiboShare: weiboShare,
		pay: pay,
		isOpenShare: isOpenShare,
		setShareCallback: setShareCallback,
		showShare: showShare,
		isShowBindPhone: isShowBindPhone,
		checkBindPhone: checkBindPhone,
		bindPhonePanel: bindPhonePanel,
		channelVipPay: channelVipPay,
		channelVipInfo: channelVipInfo,
		isCustomerBtn: isCustomerBtn,
		invokeSystem: invokeSystem,
		getSystemInfo: getSystemInfo,
		setVerifyCallback: setVerifyCallback,
		showVerify: showVerify,
		isOpenVerify: isOpenVerify,
		getVerifyInfo: getVerifyInfo,
		logout: logout,
		checkLogout: checkLogout,
		screenOn: screenOn,
		checkScreenOn: checkScreenOn,
		toHZPay: toHZPay,
		shareStatus: weiboShare,
		sendMqqMsg: sendMqqMsg,
		getTopUrl: getTopUrl,
		getAnnounce: getAnnounce,
		getServer: getServer,
		enterGame: enterGame,
		initGetServer: initGetServer,
		checkChat: checkChat,
		checkParty: checkParty,
		getBalance: getBalance,
		getPlatform: getPlatform,
		setGround: setGroundCB,
		_init: _init,
	}
}
();
